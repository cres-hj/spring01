1. 라이브러리/프레임워크 차이
- 라이브러리는 기능의 집합 -> 개발자가 능동적으로 기능을 찾아 사용
- 프레임워크 = 기능의 집합 + 사용법
    -> 개발자가 작성한 코드를 사용법에 따라 프레임워크에 위탁해서 실행
       수동적으로 실행
       제어의 역전(Inversion of Control): 개발자가 아닌 프레임워크가 코드 흐름을 주도
                                        개발자의 코드는 수동적으로 실행
2. 스프링을 왜 사용해? "IOC, AOP 하려구용"
- Inversion of Control(IOC. 제어 역전) : 프레임워크가 코드 흐름을 주도
- Aspect Oriented Programming(AOP. 관점지향 프로그래밍): 횡단관심을 처리
     횡단 관심: 여기저기 반복적으로 나타나는 기능. ex) 로그인
              횡단관심을 분리해서 구현하면 필요한 곳에 주입해서 사용할 수 있게 됨
              ex) 로그인 기능을 1번만 만들고 로그인 확인이 필요한 곳에 @Secured() 어노테이션 걸면
                    스프링이 로그인 여부 확인 후 비로그인이면 로그인 페이지로 보내버려

3. 초보자가 처음 스프링 사용할 때 주의할 점
- 프로젝트를 생성할 때 내가 패키지를 지정하게 되어있어.
  패키지를 지정하면 스프링 기능은 그 하위 패키지에 대해서만 동작
    ex) com.example.demo 패키지인 경우:
            하위 패키지인 com.example.demo.controller에서는 @Controller와 같은 스프링 어노테이션이 동작해
            com.example.demo1.controller에서는 스프링 어노테이션이 동작하지 않아
- 패키지가 다르더라도 클래스 이름은 겹치면 안된다
    ex) com.example.demo.controller1 밑에 SampleController가 있다면
            com.example.demo.controller2 밑에도 SampleController가 있으면 안됨
               * 자바에서는 패키지 다르면 클래스 이름 겹쳐도 되는데 스프링에서는 안됨!